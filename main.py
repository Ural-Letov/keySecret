import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import os
import threading
import json
from urllib.parse import urlparse
from http.server import BaseHTTPRequestHandler, HTTPServer
import logging
from logging.handlers import RotatingFileHandler

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ñ–∞–π–ª–µ init_db.py
from init_db import add_user, check_user, add_wallet, search_wallets, send_master_key_request, get_received_requests, respond_to_request, get_shared_master_keys

# --- –°–¢–ò–õ–ò–ó–ê–¶–ò–Ø –ò –¢–ï–ú–ê ---
STYLE = {
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞
    "bg_color": "#0f0f23",  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
    "fg_color": "#ffffff",  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
    "accent_color": "#6366f1",  # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    "accent_hover": "#4f46e5",  # –¢–µ–º–Ω–µ–µ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    "secondary_bg_color": "#1e1b4b",  # –¢–µ–º–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    "card_bg_color": "#312e81",  # –§–æ–Ω –∫–∞—Ä—Ç–æ—á–µ–∫
    "entry_bg_color": "#374151",  # –§–æ–Ω –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
    "entry_focus_color": "#4f46e5",  # –¶–≤–µ—Ç —Ñ–æ–∫—É—Å–∞
    "success_color": "#10b981",  # –ó–µ–ª–µ–Ω—ã–π —É—Å–ø–µ—Ö
    "error_color": "#ef4444",  # –ö—Ä–∞—Å–Ω—ã–π –æ—à–∏–±–∫–∞
    "warning_color": "#f59e0b",  # –û—Ä–∞–Ω–∂–µ–≤—ã–π –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    "info_color": "#3b82f6",  # –°–∏–Ω–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    
    # –®—Ä–∏—Ñ—Ç—ã - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞
    "font_tiny": ("Segoe UI", 8),
    "font_small": ("Segoe UI", 9),
    "font_normal": ("Segoe UI", 10),
    "font_medium": ("Segoe UI", 11),
    "font_bold": ("Segoe UI", 12, "bold"),
    "font_semibold": ("Segoe UI", 13, "bold"),
    "font_large": ("Segoe UI", 16, "bold"),
    "font_title": ("Segoe UI", 20, "bold"),
    "font_display": ("Segoe UI", 24, "bold"),
    
    # –ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –¥–ª—è –∫–æ–¥–æ–≤ –∏ –∫–ª—é—á–µ–π
    "font_mono_small": ("Consolas", 9),
    "font_mono_normal": ("Consolas", 10),
    "font_mono_medium": ("Consolas", 11),
    "font_mono_large": ("Consolas", 12, "bold"),
    
    # –û—Ç—Å—Ç—É–ø—ã –∏ —Ä–∞–∑–º–µ—Ä—ã
    "padding_small": 5,
    "padding": 10,
    "padding_large": 15,
    "ipadding": 8,
    "border_radius": 8,
    "button_height": 40,
    "entry_height": 35
}


# ---------- –ü—Ä–æ—Å—Ç–æ–π HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ----------
class SimpleHandler(BaseHTTPRequestHandler):
    def _send_json(self, obj, status=200):
        body = json.dumps(obj, ensure_ascii=False).encode("utf-8")
        self.send_response(status)
        self.send_header("Content-Type", "application/json; charset=utf-8")
        self.send_header("Content-Length", str(len(body)))
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é CORS –Ω–µ –æ—Ç–∫—Ä—ã—Ç. –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å
        # —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ origin —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è KS_ALLOWED_ORIGINS
        allow_origins = os.environ.get("KS_ALLOWED_ORIGINS")
        if allow_origins:
            # –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ origin —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
            self.send_header("Access-Control-Allow-Origin", allow_origins)
        self.end_headers()
        self.wfile.write(body)

    def do_GET(self):
        parsed = urlparse(self.path)

        if parsed.path == "/test":
            return self._send_json({"test":True})
        
        self.send_response(200)
        self.send_header("Content-type", "text/html; charset=utf-8")
        self.end_headers()
        self.wfile.write(b"<h1>Server is running inside Tkinter app!</h1>")

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def center_window(window, width, height):
    """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ."""
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()
    x = (screen_width // 2) - (width // 2)
    y = (screen_height // 2) - (height // 2)
    window.geometry(f'{width}x{height}+{x}+{y}')

def create_modern_button(parent, text, command, **kwargs):
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É —Å hover —ç—Ñ—Ñ–µ–∫—Ç–æ–º."""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_kwargs = {
        "bg": STYLE["accent_color"],
        "fg": STYLE["fg_color"],
        "font": STYLE["font_medium"],
        "relief": "flat",
        "bd": 0,
        "height": 2,
        "cursor": "hand2"
    }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    default_kwargs.update(kwargs)
    
    button = tk.Button(parent, text=text, command=command, **default_kwargs)
    
    def on_enter(e):
        button.config(bg=STYLE["accent_hover"])
    
    def on_leave(e):
        button.config(bg=STYLE["accent_color"])
    
    button.bind("<Enter>", on_enter)
    button.bind("<Leave>", on_leave)
    
    return button


def copy_to_clipboard(root, text: str, timeout: int = 20):
    """–ö–æ–ø–∏—Ä—É–µ—Ç text –≤ clipboard –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è root –∏ –æ—á–∏—â–∞–µ—Ç —á–µ—Ä–µ–∑ timeout —Å–µ–∫—É–Ω–¥,
    –µ—Å–ª–∏ clipboard –Ω–µ –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.
    """
    try:
        root.clipboard_clear()
        root.clipboard_append(text)
        logging.info("Copied sensitive data to clipboard (will clear in %s seconds)", timeout)

        def clear_if_unchanged():
            try:
                current = root.clipboard_get()
            except Exception:
                current = None
            if current == text:
                try:
                    root.clipboard_clear()
                    logging.info("Clipboard cleared after timeout")
                except Exception:
                    logging.exception("Failed to clear clipboard")

        # schedule clearing
        root.after(timeout * 1000, clear_if_unchanged)
    except Exception:
        logging.exception("Failed to copy to clipboard")

def create_modern_entry(parent, **kwargs):
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞."""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_kwargs = {
        "bg": STYLE["entry_bg_color"],
        "fg": STYLE["fg_color"],
        "insertbackground": STYLE["fg_color"],
        "relief": "flat",
        "bd": 0,
        "font": STYLE["font_normal"]
    }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    default_kwargs.update(kwargs)
    
    entry = tk.Entry(parent, **default_kwargs)
    
    def on_focus_in(e):
        entry.config(bg=STYLE["entry_focus_color"])
    
    def on_focus_out(e):
        entry.config(bg=STYLE["entry_bg_color"])
    
    entry.bind("<FocusIn>", on_focus_in)
    entry.bind("<FocusOut>", on_focus_out)
    
    return entry

def create_card_frame(parent, **kwargs):
    """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º."""
    return tk.Frame(
        parent,
        bg=STYLE["card_bg_color"],
        relief="flat",
        bd=0,
        **kwargs
    )

def create_modern_label(parent, text, **kwargs):
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É."""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_kwargs = {
        "fg": STYLE["fg_color"],
        "bg": parent.cget("bg"),
        "font": STYLE["font_normal"]
    }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    default_kwargs.update(kwargs)
    
    return tk.Label(parent, text=text, **default_kwargs)

# --- –ö–õ–ê–°–°–´ –û–ö–û–ù –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---

class BaseWindow(tk.Toplevel):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–∫–æ–Ω —Å –æ–±—â–∏–º —Å—Ç–∏–ª–µ–º."""
    def __init__(self, title, width, height):
        super().__init__()
        self.title(title)
        self.configure(bg=STYLE["bg_color"])
        self.resizable(False, False)
        center_window(self, width, height)
        # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–ª–æ –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.protocol("WM_DELETE_WINDOW", self.destroy)

class CreateWalletWindow(BaseWindow):
    """–û–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞."""
    def __init__(self, master_key):
        super().__init__("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫", 450, 500)
        self.master_key = master_key
        self.create_widgets()

    def create_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(self, bg=STYLE["bg_color"])
        title_frame.pack(fill="x", padx=STYLE["padding_large"], pady=(STYLE["padding_large"], STYLE["padding"]))
        
        create_modern_label(title_frame, "üîê –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫", font=STYLE["font_title"]).pack()
        create_modern_label(title_frame, "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞", font=STYLE["font_medium"], fg=STYLE["accent_color"]).pack(pady=(5, 0))
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
        main_card = create_card_frame(self)
        main_card.pack(fill="both", expand=True, padx=STYLE["padding_large"], pady=STYLE["padding"])
        
        fields = [
            ("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞:", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"),
            ("–õ–æ–≥–∏–Ω:", "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ email"),
            ("–ü–∞—Ä–æ–ª—å:", "–ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞"),
            ("–•–æ—Å—Ç:", "–ê–¥—Ä–µ—Å —Å–∞–π—Ç–∞ –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        ]
        self.entries = {}

        for i, (field, placeholder) in enumerate(fields):
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª—è
            field_frame = tk.Frame(main_card, bg=STYLE["card_bg_color"])
            field_frame.pack(fill="x", padx=STYLE["padding"], pady=STYLE["padding_small"])
            
            # –ú–µ—Ç–∫–∞ –ø–æ–ª—è
            create_modern_label(field_frame, field, font=STYLE["font_medium"], fg=STYLE["accent_color"]).pack(anchor="w")
            
            # –ü–æ–ª–µ –≤–≤–æ–¥–∞
            entry = create_modern_entry(field_frame, width=45)
            entry.pack(fill="x", pady=(STYLE["padding_small"], 0), ipady=STYLE["ipadding"])
            entry.insert(0, placeholder)
            entry.bind("<FocusIn>", lambda e, entry=entry, placeholder=placeholder: self.clear_placeholder(entry, placeholder))
            entry.bind("<FocusOut>", lambda e, entry=entry, placeholder=placeholder: self.restore_placeholder(entry, placeholder))
            
            self.entries[field] = entry
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(main_card, bg=STYLE["card_bg_color"])
        button_frame.pack(fill="x", padx=STYLE["padding"], pady=(STYLE["padding_large"], STYLE["padding"]))
        
        create_modern_button(button_frame, "‚ú® –°–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫", self.save_wallet, width=30).pack(side="left", padx=(0, STYLE["padding_small"]))
        create_modern_button(button_frame, "‚ùå –û—Ç–º–µ–Ω–∞", self.destroy, bg=STYLE["error_color"], width=15).pack(side="right")
    
    def clear_placeholder(self, entry, placeholder):
        if entry.get() == placeholder:
            entry.delete(0, tk.END)
            entry.config(fg=STYLE["fg_color"])
    
    def restore_placeholder(self, entry, placeholder):
        if not entry.get():
            entry.insert(0, placeholder)
            entry.config(fg=STYLE["accent_color"])

    def save_wallet(self):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∏—Å–∫–ª—é—á–∞—è placeholder'—ã
        data = {}
        for key, entry in self.entries.items():
            value = entry.get()
            field_name = key.split(":")[0].lower().replace(" ", "_")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ placeholder
            placeholders = ["–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏", "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ email", 
                          "–ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞", "–ê–¥—Ä–µ—Å —Å–∞–π—Ç–∞ –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"]
            if value not in placeholders:
                data[field_name] = value
        
        if len(data) != 4:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!", parent=self)
            return

        success = add_wallet(data["–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–æ—à–µ–ª—å–∫–∞"], data["–ª–æ–≥–∏–Ω"], data["–ø–∞—Ä–æ–ª—å"], data["—Ö–æ—Å—Ç"], self.master_key)
        if success:
            messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", "‚úÖ –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", parent=self)
            self.destroy()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫.", parent=self)

class SearchWalletWindow(BaseWindow):
    """–û–∫–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤."""
    def __init__(self, master_key):
        super().__init__("–ü–æ–∏—Å–∫ –∫–æ—à–µ–ª—å–∫–æ–≤", 800, 700)
        self.master_key = master_key
        self.create_widgets()
        self.show_wallets()

    def create_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(self, bg=STYLE["bg_color"])
        title_frame.pack(fill="x", padx=STYLE["padding_large"], pady=(STYLE["padding_large"], STYLE["padding"]))
        
        create_modern_label(title_frame, "üîç –ü–æ–∏—Å–∫ –∫–æ—à–µ–ª—å–∫–æ–≤", font=STYLE["font_title"]).pack()
        create_modern_label(title_frame, "–ù–∞–π–¥–∏—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –∫–æ—à–µ–ª—å–∫–∞–º–∏", font=STYLE["font_medium"], fg=STYLE["accent_color"]).pack(pady=(5, 0))
        
        # –ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
        search_card = create_card_frame(self)
        search_card.pack(fill="x", padx=STYLE["padding_large"], pady=STYLE["padding"])
        
        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        search_field_frame = tk.Frame(search_card, bg=STYLE["card_bg_color"])
        search_field_frame.pack(fill="x", padx=STYLE["padding"], pady=STYLE["padding"])
        
        create_modern_label(search_field_frame, "üîé –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ (–ø–æ–∏—Å–∫):", font=STYLE["font_medium"], fg=STYLE["accent_color"]).pack(anchor="w")
        self.entry_name = create_modern_entry(search_field_frame, width=50)
        self.entry_name.pack(fill="x", pady=(STYLE["padding_small"], 0), ipady=STYLE["ipadding"])
        self.entry_name.insert(0, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞...")
        self.entry_name.bind("<FocusIn>", lambda e: self.clear_search_placeholder())
        self.entry_name.bind("<FocusOut>", lambda e: self.restore_search_placeholder())
        
        # –ü–æ–ª–µ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–∞
        mk_field_frame = tk.Frame(search_card, bg=STYLE["card_bg_color"])
        mk_field_frame.pack(fill="x", padx=STYLE["padding"], pady=(0, STYLE["padding"]))
        
        create_modern_label(mk_field_frame, "üîë –ü–æ–ª–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏:", font=STYLE["font_medium"], fg=STYLE["accent_color"]).pack(anchor="w")
        self.entry_full_mk = create_modern_entry(mk_field_frame, width=50)
        self.entry_full_mk.pack(fill="x", pady=(STYLE["padding_small"], 0), ipady=STYLE["ipadding"])
        self.entry_full_mk.insert(0, self.master_key)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = tk.Frame(search_card, bg=STYLE["card_bg_color"])
        button_frame.pack(fill="x", padx=STYLE["padding"], pady=(0, STYLE["padding"]))
        
        create_modern_button(button_frame, "üîÑ –û–±–Ω–æ–≤–∏—Ç—å / –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å", self.show_wallets, width=30).pack(side="left")
        create_modern_button(button_frame, "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", lambda: CreateWalletWindow(self.master_key), width=20).pack(side="right")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
        results_card = create_card_frame(self)
        results_card.pack(fill="both", expand=True, padx=STYLE["padding_large"], pady=(0, STYLE["padding_large"]))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_header = tk.Frame(results_card, bg=STYLE["card_bg_color"])
        results_header.pack(fill="x", padx=STYLE["padding"], pady=STYLE["padding"])
        
        create_modern_label(results_header, "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞", font=STYLE["font_medium"], fg=STYLE["accent_color"]).pack(side="left")
        
        # –û–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        canvas_frame = tk.Frame(results_card, bg=STYLE["card_bg_color"])
        canvas_frame.pack(fill="both", expand=True, padx=STYLE["padding"], pady=(0, STYLE["padding"]))
        
        canvas = tk.Canvas(canvas_frame, bg=STYLE["secondary_bg_color"], highlightthickness=0)
        scrollbar = tk.Scrollbar(canvas_frame, orient="vertical", command=canvas.yview, bg=STYLE["entry_bg_color"])
        self.inner_frame = tk.Frame(canvas, bg=STYLE["secondary_bg_color"])

        self.inner_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        canvas.create_window((0, 0), window=self.inner_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
    
    def clear_search_placeholder(self):
        if self.entry_name.get() == "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞...":
            self.entry_name.delete(0, tk.END)
            self.entry_name.config(fg=STYLE["fg_color"])
    
    def restore_search_placeholder(self):
        if not self.entry_name.get():
            self.entry_name.insert(0, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞...")
            self.entry_name.config(fg=STYLE["accent_color"])

    def show_wallets(self):
        for widget in self.inner_frame.winfo_children():
            widget.destroy()

        name_filter = self.entry_name.get().strip()
        if name_filter == "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞...":
            name_filter = ""
        provided_mk = self.entry_full_mk.get().strip()
        mk4 = provided_mk[:4] if provided_mk else ""

        if not mk4:
            error_frame = tk.Frame(self.inner_frame, bg=STYLE["secondary_bg_color"])
            error_frame.pack(fill="x", padx=STYLE["padding"], pady=STYLE["padding"])
            create_modern_label(error_frame, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞.", fg=STYLE["error_color"], font=STYLE["font_medium"]).pack(pady=STYLE["padding"])
            return

        wallets = search_wallets(name_filter, mk4, provided_mk)

        if not wallets:
            no_results_frame = tk.Frame(self.inner_frame, bg=STYLE["secondary_bg_color"])
            no_results_frame.pack(fill="x", padx=STYLE["padding"], pady=STYLE["padding"])
            create_modern_label(no_results_frame, "üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", fg=STYLE["warning_color"], font=STYLE["font_medium"]).pack(pady=STYLE["padding"])
            return

        for i, e in enumerate(wallets):
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ—à–µ–ª—å–∫–∞
            wallet_card = create_card_frame(self.inner_frame)
            wallet_card.pack(fill="x", padx=STYLE["padding"], pady=STYLE["padding_small"])
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
            header_frame = tk.Frame(wallet_card, bg=STYLE["card_bg_color"])
            header_frame.pack(fill="x", padx=STYLE["padding"], pady=(STYLE["padding"], 0))
            
            if e["decrypted"]:
                name, login, pwd, host = e["name"], e["login"], e["password"], e["host"]
                status = "‚úÖ –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ"
                status_color = STYLE["success_color"]
                status_icon = "üîì"
            else:
                name, login, pwd, host = "*** (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ)", "***", "***", "***"
                status = "‚ùå –ù–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ (–Ω–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á)"
                status_color = STYLE["error_color"]
                status_icon = "üîí"
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Ç–∞—Ç—É—Å
            create_modern_label(header_frame, f"üíº {name}", font=STYLE["font_semibold"], fg=STYLE["accent_color"]).pack(side="left")
            create_modern_label(header_frame, f"{status_icon} {status}", font=STYLE["font_medium"], fg=status_color).pack(side="right")
            
            # –î–µ—Ç–∞–ª–∏ –∫–æ—à–µ–ª—å–∫–∞
            details_frame = tk.Frame(wallet_card, bg=STYLE["card_bg_color"])
            details_frame.pack(fill="x", padx=STYLE["padding"], pady=(STYLE["padding_small"], STYLE["padding"]))
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
            details_frame.grid_columnconfigure(1, weight=1)
            
            # –õ–æ–≥–∏–Ω
            create_modern_label(details_frame, "üë§ –õ–æ–≥–∏–Ω:", font=STYLE["font_medium"], fg=STYLE["accent_color"]).grid(row=0, column=0, sticky="w", padx=(0, STYLE["padding_small"]))
            create_modern_label(details_frame, login, font=STYLE["font_medium"]).grid(row=0, column=1, sticky="w")
            
            # –ü–∞—Ä–æ–ª—å
            create_modern_label(details_frame, "üîë –ü–∞—Ä–æ–ª—å:", font=STYLE["font_medium"], fg=STYLE["accent_color"]).grid(row=1, column=0, sticky="w", padx=(0, STYLE["padding_small"]))
            create_modern_label(details_frame, pwd, font=STYLE["font_medium"]).grid(row=1, column=1, sticky="w")
            
            # –•–æ—Å—Ç
            create_modern_label(details_frame, "üåê –•–æ—Å—Ç:", font=STYLE["font_medium"], fg=STYLE["accent_color"]).grid(row=2, column=0, sticky="w", padx=(0, STYLE["padding_small"]))
            create_modern_label(details_frame, host, font=STYLE["font_medium"]).grid(row=2, column=1, sticky="w")
            
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            if e["decrypted"]:
                actions_frame = tk.Frame(wallet_card, bg=STYLE["card_bg_color"])
                actions_frame.pack(fill="x", padx=STYLE["padding"], pady=(0, STYLE["padding"]))
                
                def make_copy(password=pwd):
                    copy_to_clipboard(self, password, timeout=20)
                    messagebox.showinfo("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ", "üìã –ü–∞—Ä–æ–ª—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞! (–±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω)", parent=self)
                
                create_modern_button(actions_frame, "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å", make_copy, width=20).pack(side="left", padx=(0, STYLE["padding_small"]))
                create_modern_button(actions_frame, "üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å", lambda p=pwd, l=login, h=host: self.toggle_password_visibility(p, l, h), width=20).pack(side="left")
    
    def toggle_password_visibility(self, password, login, host):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ."""
        visibility_window = tk.Toplevel(self)
        visibility_window.title("–î–µ—Ç–∞–ª–∏ –∫–æ—à–µ–ª—å–∫–∞")
        visibility_window.configure(bg=STYLE["bg_color"])
        visibility_window.geometry("400x300")
        center_window(visibility_window, 400, 300)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        create_modern_label(visibility_window, "üîç –î–µ—Ç–∞–ª–∏ –∫–æ—à–µ–ª—å–∫–∞", font=STYLE["font_large"]).pack(pady=STYLE["padding_large"])
        
        # –î–µ—Ç–∞–ª–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
        details_card = create_card_frame(visibility_window)
        details_card.pack(fill="both", expand=True, padx=STYLE["padding_large"], pady=STYLE["padding"])
        
        # –õ–æ–≥–∏–Ω
        login_frame = tk.Frame(details_card, bg=STYLE["card_bg_color"])
        login_frame.pack(fill="x", padx=STYLE["padding"], pady=STYLE["padding_small"])
        create_modern_label(login_frame, "üë§ –õ–æ–≥–∏–Ω:", font=STYLE["font_medium"], fg=STYLE["accent_color"]).pack(anchor="w")
        create_modern_label(login_frame, login, font=STYLE["font_normal"]).pack(anchor="w")
        
        # –ü–∞—Ä–æ–ª—å
        password_frame = tk.Frame(details_card, bg=STYLE["card_bg_color"])
        password_frame.pack(fill="x", padx=STYLE["padding"], pady=STYLE["padding_small"])
        create_modern_label(password_frame, "üîë –ü–∞—Ä–æ–ª—å:", font=STYLE["font_medium"], fg=STYLE["accent_color"]).pack(anchor="w")
        create_modern_label(password_frame, password, font=STYLE["font_normal"]).pack(anchor="w")
        
        # –•–æ—Å—Ç
        host_frame = tk.Frame(details_card, bg=STYLE["card_bg_color"])
        host_frame.pack(fill="x", padx=STYLE["padding"], pady=STYLE["padding_small"])
        create_modern_label(host_frame, "üåê –•–æ—Å—Ç:", font=STYLE["font_medium"], fg=STYLE["accent_color"]).pack(anchor="w")
        create_modern_label(host_frame, host, font=STYLE["font_normal"]).pack(anchor="w")
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        create_modern_button(details_card, "‚ùå –ó–∞–∫—Ä—ã—Ç—å", visibility_window.destroy, width=20).pack(pady=STYLE["padding_large"])


class MasterKeysWindow(BaseWindow):
    """–û–∫–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–∞–º–∏."""
    def __init__(self, username, master_key):
        super().__init__("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–∞–º–∏", 800, 600)
        self.username = username
        self.master_key = master_key
        self.create_widgets()
        self.load_shared_keys()

    def create_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(self, bg=STYLE["bg_color"])
        title_frame.pack(fill="x", padx=STYLE["padding_large"], pady=(STYLE["padding_large"], STYLE["padding"]))
        
        create_modern_label(title_frame, "üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–∞–º–∏", font=STYLE["font_title"]).pack()
        create_modern_label(title_frame, "–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ –≤–∞—à–∏–º –¥–∞–Ω–Ω—ã–º", font=STYLE["font_medium"], fg=STYLE["accent_color"]).pack(pady=(5, 0))
        
        # –í–∞—à –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á
        your_key_card = create_card_frame(self)
        your_key_card.pack(fill="x", padx=STYLE["padding_large"], pady=STYLE["padding"])
        
        key_header = tk.Frame(your_key_card, bg=STYLE["card_bg_color"])
        key_header.pack(fill="x", padx=STYLE["padding"], pady=(STYLE["padding"], 0))
        
        create_modern_label(key_header, "üîê –í–∞—à –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á", font=STYLE["font_medium"], fg=STYLE["accent_color"]).pack(side="left")
        
        key_display_frame = tk.Frame(your_key_card, bg=STYLE["card_bg_color"])
        key_display_frame.pack(fill="x", padx=STYLE["padding"], pady=(0, STYLE["padding"]))
        
        self.key_entry = create_modern_entry(key_display_frame, width=60, state="readonly")
        self.key_entry.pack(side="left", fill="x", expand=True, padx=(0, STYLE["padding_small"]))
        self.key_entry.config(state="normal")
        self.key_entry.insert(0, self.master_key)
        self.key_entry.config(state="readonly")
        
        create_modern_button(key_display_frame, "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", self.copy_master_key, width=15).pack(side="right")
        
        # –û–±—â–∏–µ –∫–ª—é—á–∏
        shared_keys_card = create_card_frame(self)
        shared_keys_card.pack(fill="both", expand=True, padx=STYLE["padding_large"], pady=(0, STYLE["padding_large"]))
        
        shared_header = tk.Frame(shared_keys_card, bg=STYLE["card_bg_color"])
        shared_header.pack(fill="x", padx=STYLE["padding"], pady=(STYLE["padding"], 0))
        
        create_modern_label(shared_header, "ü§ù –û–±—â–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–∏", font=STYLE["font_medium"], fg=STYLE["accent_color"]).pack(side="left")
        create_modern_button(shared_header, "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", self.load_shared_keys, width=15).pack(side="right")
        
        # –û–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –æ–±—â–∏—Ö –∫–ª—é—á–µ–π
        canvas_frame = tk.Frame(shared_keys_card, bg=STYLE["card_bg_color"])
        canvas_frame.pack(fill="both", expand=True, padx=STYLE["padding"], pady=(0, STYLE["padding"]))
        
        canvas = tk.Canvas(canvas_frame, bg=STYLE["secondary_bg_color"], highlightthickness=0)
        scrollbar = tk.Scrollbar(canvas_frame, orient="vertical", command=canvas.yview, bg=STYLE["entry_bg_color"])
        self.inner_frame = tk.Frame(canvas, bg=STYLE["secondary_bg_color"])

        self.inner_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        canvas.create_window((0, 0), window=self.inner_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

    def copy_master_key(self):
        copy_to_clipboard(self, self.master_key, timeout=30)
        messagebox.showinfo("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ", "üìã –ú–∞—Å—Ç–µ—Ä-–∫–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞! (–±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω)", parent=self)

    def load_shared_keys(self):
        for widget in self.inner_frame.winfo_children():
            widget.destroy()
        
        shared_keys = get_shared_master_keys(self.username)
        
        if not shared_keys:
            no_keys_frame = tk.Frame(self.inner_frame, bg=STYLE["secondary_bg_color"])
            no_keys_frame.pack(fill="x", padx=STYLE["padding"], pady=STYLE["padding"])
            create_modern_label(no_keys_frame, "üîç –ù–µ—Ç –æ–±—â–∏—Ö –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–µ–π", fg=STYLE["warning_color"], font=STYLE["font_medium"]).pack(pady=STYLE["padding"])
            return
        
        for key_data in shared_keys:
            username, master_key, status = key_data
            
            key_card = create_card_frame(self.inner_frame)
            key_card.pack(fill="x", padx=STYLE["padding"], pady=STYLE["padding_small"])
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
            header_frame = tk.Frame(key_card, bg=STYLE["card_bg_color"])
            header_frame.pack(fill="x", padx=STYLE["padding"], pady=(STYLE["padding"], 0))
            
            create_modern_label(header_frame, f"üë§ {username}", font=STYLE["font_medium"], fg=STYLE["accent_color"]).pack(side="left")
            
            status_color = STYLE["success_color"] if status == "accepted" else STYLE["warning_color"]
            status_text = "‚úÖ –ü—Ä–∏–Ω—è—Ç" if status == "accepted" else "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
            create_modern_label(header_frame, status_text, font=STYLE["font_small"], fg=status_color).pack(side="right")
            
            # –î–µ—Ç–∞–ª–∏ –∫–ª—é—á–∞
            details_frame = tk.Frame(key_card, bg=STYLE["card_bg_color"])
            details_frame.pack(fill="x", padx=STYLE["padding"], pady=(0, STYLE["padding"]))
            
            create_modern_label(details_frame, f"üîë –ö–ª—é—á: {master_key}", font=STYLE["font_small"]).pack(anchor="w")
            
            if status == "accepted":
                def copy_key(key=master_key):
                    copy_to_clipboard(self, key, timeout=30)
                    messagebox.showinfo("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ", "üìã –ö–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞! (–±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω)", parent=self)
                
                create_modern_button(details_frame, "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á", copy_key, width=20).pack(anchor="w", pady=(STYLE["padding_small"], 0))


class ShareKeyWindow(BaseWindow):
    """–û–∫–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±—â–∏–π –¥–æ—Å—Ç—É–ø –∫ –∫–ª—é—á—É."""
    def __init__(self, username):
        super().__init__("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–ª—é—á", 500, 400)
        self.username = username
        self.create_widgets()

    def create_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(self, bg=STYLE["bg_color"])
        title_frame.pack(fill="x", padx=STYLE["padding_large"], pady=(STYLE["padding_large"], STYLE["padding"]))
        
        create_modern_label(title_frame, "üì§ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–ª—é—á", font=STYLE["font_title"]).pack()
        create_modern_label(title_frame, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á—É", font=STYLE["font_medium"], fg=STYLE["accent_color"]).pack(pady=(5, 0))
        
        # –§–æ—Ä–º–∞ –∑–∞–ø—Ä–æ—Å–∞
        form_card = create_card_frame(self)
        form_card.pack(fill="both", expand=True, padx=STYLE["padding_large"], pady=STYLE["padding"])
        
        form_content = tk.Frame(form_card, bg=STYLE["card_bg_color"])
        form_content.pack(fill="both", expand=True, padx=STYLE["padding_large"], pady=STYLE["padding_large"])
        
        # –ü–æ–ª–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_frame = tk.Frame(form_content, bg=STYLE["card_bg_color"])
        user_frame.pack(fill="x", pady=STYLE["padding"])
        
        create_modern_label(user_frame, "üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è", font=STYLE["font_medium"], fg=STYLE["accent_color"]).pack(anchor="w")
        self.entry_username = create_modern_entry(user_frame, width=40)
        self.entry_username.pack(fill="x", pady=(STYLE["padding_small"], 0), ipady=STYLE["ipadding"])
        self.entry_username.insert(0, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        self.entry_username.bind("<FocusIn>", lambda e: self.clear_username_placeholder())
        self.entry_username.bind("<FocusOut>", lambda e: self.restore_username_placeholder())
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_frame = tk.Frame(form_content, bg=STYLE["card_bg_color"])
        info_frame.pack(fill="x", pady=STYLE["padding"])
        
        create_modern_label(info_frame, "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", font=STYLE["font_medium"], fg=STYLE["info_color"]).pack(anchor="w")
        create_modern_label(info_frame, "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ\n‚Ä¢ –í—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è\n‚Ä¢ –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –ø—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞", 
                          font=STYLE["font_small"], fg=STYLE["fg_color"]).pack(anchor="w", pady=(STYLE["padding_small"], 0))
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = tk.Frame(form_content, bg=STYLE["card_bg_color"])
        buttons_frame.pack(fill="x", pady=(STYLE["padding_large"], 0))
        
        create_modern_button(buttons_frame, "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å", self.send_request, width=25).pack(side="left", padx=(0, STYLE["padding_small"]))
        create_modern_button(buttons_frame, "‚ùå –û—Ç–º–µ–Ω–∞", self.destroy, bg=STYLE["error_color"], width=15).pack(side="right")
    
    def clear_username_placeholder(self):
        if self.entry_username.get() == "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...":
            self.entry_username.delete(0, tk.END)
            self.entry_username.config(fg=STYLE["fg_color"])
    
    def restore_username_placeholder(self):
        if not self.entry_username.get():
            self.entry_username.insert(0, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            self.entry_username.config(fg=STYLE["accent_color"])
    
    def send_request(self):
        target_username = self.entry_username.get()
        
        if target_username == "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...":
            messagebox.showwarning("–û—à–∏–±–∫–∞", "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è!")
            return
        
        if not target_username:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è!")
            return
        
        if target_username == self.username:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å–∞–º–æ–º—É —Å–µ–±–µ!")
            return
        
        success = send_master_key_request(self.username, target_username)
        if success:
            messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_username}!\n–û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.", parent=self)
            self.destroy()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", parent=self)


class IncomingRequestsWindow(BaseWindow):
    """–û–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á."""
    def __init__(self, username):
        super().__init__("–í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã", 700, 500)
        self.username = username
        self.create_widgets()
        self.load_requests()

    def create_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(self, bg=STYLE["bg_color"])
        title_frame.pack(fill="x", padx=STYLE["padding_large"], pady=(STYLE["padding_large"], STYLE["padding"]))
        
        create_modern_label(title_frame, "üì• –í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã", font=STYLE["font_title"]).pack()
        create_modern_label(title_frame, "–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏ –æ–¥–æ–±—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á—É", font=STYLE["font_medium"], fg=STYLE["accent_color"]).pack(pady=(5, 0))
        
        # –û–±–ª–∞—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤
        requests_card = create_card_frame(self)
        requests_card.pack(fill="both", expand=True, padx=STYLE["padding_large"], pady=STYLE["padding"])
        
        requests_header = tk.Frame(requests_card, bg=STYLE["card_bg_color"])
        requests_header.pack(fill="x", padx=STYLE["padding"], pady=(STYLE["padding"], 0))
        
        create_modern_label(requests_header, "üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤", font=STYLE["font_medium"], fg=STYLE["accent_color"]).pack(side="left")
        create_modern_button(requests_header, "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", self.load_requests, width=15).pack(side="right")
        
        # –û–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        canvas_frame = tk.Frame(requests_card, bg=STYLE["card_bg_color"])
        canvas_frame.pack(fill="both", expand=True, padx=STYLE["padding"], pady=(0, STYLE["padding"]))
        
        canvas = tk.Canvas(canvas_frame, bg=STYLE["secondary_bg_color"], highlightthickness=0)
        scrollbar = tk.Scrollbar(canvas_frame, orient="vertical", command=canvas.yview, bg=STYLE["entry_bg_color"])
        self.inner_frame = tk.Frame(canvas, bg=STYLE["secondary_bg_color"])

        self.inner_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        canvas.create_window((0, 0), window=self.inner_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

    def load_requests(self):
        for widget in self.inner_frame.winfo_children():
            widget.destroy()
        
        requests = get_received_requests(self.username)
        
        if not requests:
            no_requests_frame = tk.Frame(self.inner_frame, bg=STYLE["secondary_bg_color"])
            no_requests_frame.pack(fill="x", padx=STYLE["padding"], pady=STYLE["padding"])
            create_modern_label(no_requests_frame, "üîç –ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤", fg=STYLE["warning_color"], font=STYLE["font_medium"]).pack(pady=STYLE["padding"])
            return
        
        for request_data in requests:
            request_id, from_user, status = request_data
            
            request_card = create_card_frame(self.inner_frame)
            request_card.pack(fill="x", padx=STYLE["padding"], pady=STYLE["padding_small"])
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ø—Ä–æ—Å–∞
            header_frame = tk.Frame(request_card, bg=STYLE["card_bg_color"])
            header_frame.pack(fill="x", padx=STYLE["padding"], pady=(STYLE["padding"], 0))
            
            create_modern_label(header_frame, f"üë§ –û—Ç: {from_user}", font=STYLE["font_medium"], fg=STYLE["accent_color"]).pack(side="left")
            
            status_color = STYLE["success_color"] if status == "accepted" else STYLE["warning_color"] if status == "pending" else STYLE["error_color"]
            status_text = "‚úÖ –ü—Ä–∏–Ω—è—Ç" if status == "accepted" else "‚è≥ –û–∂–∏–¥–∞–µ—Ç" if status == "pending" else "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω"
            create_modern_label(header_frame, status_text, font=STYLE["font_small"], fg=status_color).pack(side="right")
            
            # –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞
            details_frame = tk.Frame(request_card, bg=STYLE["card_bg_color"])
            details_frame.pack(fill="x", padx=STYLE["padding"], pady=(0, STYLE["padding"]))
            
            create_modern_label(details_frame, f"üÜî ID –∑–∞–ø—Ä–æ—Å–∞: {request_id}", font=STYLE["font_small"]).pack(anchor="w")
            create_modern_label(details_frame, f"üìÖ –°—Ç–∞—Ç—É—Å: {status}", font=STYLE["font_small"]).pack(anchor="w")
            
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
            if status == "pending":
                actions_frame = tk.Frame(request_card, bg=STYLE["card_bg_color"])
                actions_frame.pack(fill="x", padx=STYLE["padding"], pady=(0, STYLE["padding"]))
                
                def accept_request(req_id=request_id):
                    respond_to_request(req_id, True)
                    messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", "‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á—É.", parent=self)
                    self.load_requests()
                
                def reject_request(req_id=request_id):
                    respond_to_request(req_id, False)
                    messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", "‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω.", parent=self)
                    self.load_requests()
                
                create_modern_button(actions_frame, "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", accept_request, width=15).pack(side="left", padx=(0, STYLE["padding_small"]))
                create_modern_button(actions_frame, "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", reject_request, bg=STYLE["error_color"], width=15).pack(side="left")


class MainApplication(tk.Toplevel):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞."""
    def __init__(self, username, master_key, login_window):
        super().__init__()
        self.username = username
        self.master_key = master_key
        self.login_window = login_window

        self.title("keySecret ‚Äî –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        self.configure(bg=STYLE["bg_color"])
        self.geometry("900x700")
        center_window(self, 900, 700)
        self.protocol("WM_DELETE_WINDOW", self.on_closing)

        self.create_widgets()

    def create_widgets(self):
        # --- –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å ---
        top_frame = tk.Frame(self, bg=STYLE["secondary_bg_color"])
        top_frame.pack(fill="x", ipady=STYLE["padding_large"])
        
        # –õ–æ–≥–æ—Ç–∏–ø –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        welcome_frame = tk.Frame(top_frame, bg=STYLE["secondary_bg_color"])
        welcome_frame.pack(side="left", padx=STYLE["padding_large"])
        
        create_modern_label(welcome_frame, f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {self.username}!", font=STYLE["font_semibold"], fg=STYLE["accent_color"]).pack(anchor="w")
        create_modern_label(welcome_frame, "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –ø–∞—Ä–æ–ª—è–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ", font=STYLE["font_medium"], fg=STYLE["fg_color"]).pack(anchor="w")
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        create_modern_button(top_frame, "üö™ –í—ã—Ö–æ–¥", self.logout, bg=STYLE["error_color"], width=15).pack(side="right", padx=STYLE["padding_large"])

        # --- –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ ---
        center_frame = tk.Frame(self, bg=STYLE["bg_color"])
        center_frame.pack(expand=True, fill="both", padx=STYLE["padding_large"], pady=STYLE["padding_large"])
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
        section_header = tk.Frame(center_frame, bg=STYLE["bg_color"])
        section_header.pack(fill="x", pady=(0, STYLE["padding_large"]))
        
        create_modern_label(section_header, "üéõÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", font=STYLE["font_title"]).pack()
        create_modern_label(section_header, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏", font=STYLE["font_medium"], fg=STYLE["accent_color"]).pack(pady=(5, 0))
        
        # –°–µ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
        buttons_grid = tk.Frame(center_frame, bg=STYLE["bg_color"])
        buttons_grid.pack(expand=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏
        buttons_grid.grid_columnconfigure(0, weight=1)
        buttons_grid.grid_columnconfigure(1, weight=1)
        buttons_grid.grid_rowconfigure(0, weight=1)
        buttons_grid.grid_rowconfigure(1, weight=1)
        buttons_grid.grid_rowconfigure(2, weight=1)
        
        buttons = [
            ("üîç –ü–æ–∏—Å–∫ –∫–æ—à–µ–ª—å–∫–æ–≤", "–ù–∞–π–¥–∏—Ç–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ\n–≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏", lambda: SearchWalletWindow(self.master_key)),
            ("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫", "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫\n–≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é", lambda: CreateWalletWindow(self.master_key)),
            ("üîë –ú–∞—Å—Ç–µ—Ä-–∫–ª—é—á–∏", "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–æ—Å—Ç—É–ø–æ–º\n–∫ –≤–∞—à–∏–º –¥–∞–Ω–Ω—ã–º", self.show_master_keys),
            ("üì§ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–ª—é—á", "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞\n–æ–±—â–∏–π –¥–æ—Å—Ç—É–ø –∫ –∫–ª—é—á—É", self.show_share_key),
            ("üì• –í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã", "–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏ –æ–¥–æ–±—Ä–∏—Ç–µ\n–∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–∞—à –∫–ª—é—á", self.show_incoming_requests),
            ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n–∏ –ø—Ä–æ—Ñ–∏–ª—è", self.show_settings),
        ]

        for i, (text, description, command) in enumerate(buttons):
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏
            button_card = create_card_frame(buttons_grid)
            button_card.grid(row=i//2, column=i%2, padx=STYLE["padding"], pady=STYLE["padding"], sticky="nsew")
            
            # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            card_content = tk.Frame(button_card, bg=STYLE["card_bg_color"])
            card_content.pack(expand=True, fill="both", padx=STYLE["padding_large"], pady=STYLE["padding_large"])
            
            # –ò–∫–æ–Ω–∫–∞ –∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            create_modern_label(card_content, text, font=STYLE["font_semibold"], fg=STYLE["accent_color"]).pack(pady=(0, STYLE["padding_small"]))
            create_modern_label(card_content, description, font=STYLE["font_medium"], fg=STYLE["fg_color"]).pack(pady=(0, STYLE["padding"]))
            
            # –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
            create_modern_button(card_content, "–í—ã–ø–æ–ª–Ω–∏—Ç—å", command, width=20).pack()

        # --- –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å ---
        bottom_frame = tk.Frame(self, bg=STYLE["secondary_bg_color"])
        bottom_frame.pack(side="bottom", fill="x", ipady=STYLE["padding"])
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–µ
        mk_frame = tk.Frame(bottom_frame, bg=STYLE["secondary_bg_color"])
        mk_frame.pack()
        
        create_modern_label(mk_frame, "üîê –í–∞—à –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á:", font=STYLE["font_medium"], fg=STYLE["accent_color"]).pack(side="left")
        create_modern_label(mk_frame, self.master_key, font=STYLE["font_mono_medium"], fg=STYLE["fg_color"]).pack(side="left", padx=(STYLE["padding_small"], 0))
    
    def show_master_keys(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–∞–º–∏."""
        MasterKeysWindow(self.username, self.master_key)
    
    def show_share_key(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –¥–ª—è –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏."""
        ShareKeyWindow(self.username)
    
    def show_incoming_requests(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""
        IncomingRequestsWindow(self.username)
    
    def show_settings(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        messagebox.showinfo("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏!")

    def on_closing(self):
        if messagebox.askokcancel("–í—ã—Ö–æ–¥", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?"):
            self.login_window.destroy()

    def logout(self):
        self.destroy()
        self.login_window.deiconify() # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—Ö–æ–¥–∞ —Å–Ω–æ–≤–∞


class LoginFrame(tk.Frame):
    """–§—Ä–µ–π–º –¥–ª—è –≤—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    def __init__(self, master):
        super().__init__(master, bg=STYLE["bg_color"])
        self.master = master
        self.create_widgets()

    def create_widgets(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = tk.Frame(self, bg=STYLE["bg_color"])
        main_container.pack(expand=True, fill="both")
        
        # –õ–æ–≥–æ—Ç–∏–ø –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = tk.Frame(main_container, bg=STYLE["bg_color"])
        header_frame.pack(pady=(STYLE["padding_large"] * 2, STYLE["padding_large"]))
        
        try:
            img = Image.open("tlog.png").resize((250, 90))
            logo = ImageTk.PhotoImage(img)
            logo_label = tk.Label(header_frame, image=logo, bg=STYLE["bg_color"])
            logo_label.image = logo
            logo_label.pack()
        except FileNotFoundError:
            create_modern_label(header_frame, "üîê keySecret", font=STYLE["font_display"], fg=STYLE["accent_color"]).pack()
        
        create_modern_label(header_frame, "–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π", font=STYLE["font_medium"], fg=STYLE["fg_color"]).pack(pady=(STYLE["padding_small"], 0))
        
        # –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
        login_card = create_card_frame(main_container)
        login_card.pack(expand=True, fill="x", padx=STYLE["padding_large"] * 2, pady=STYLE["padding"])
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã
        form_header = tk.Frame(login_card, bg=STYLE["card_bg_color"])
        form_header.pack(fill="x", padx=STYLE["padding_large"], pady=(STYLE["padding_large"], STYLE["padding"]))
        
        create_modern_label(form_header, "üîë –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É", font=STYLE["font_title"], fg=STYLE["accent_color"]).pack()
        create_modern_label(form_header, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞", font=STYLE["font_medium"], fg=STYLE["fg_color"]).pack(pady=(STYLE["padding_small"], 0))

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        form_content = tk.Frame(login_card, bg=STYLE["card_bg_color"])
        form_content.pack(fill="x", padx=STYLE["padding_large"], pady=(0, STYLE["padding_large"]))
        
        # –ü–æ–ª–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username_frame = tk.Frame(form_content, bg=STYLE["card_bg_color"])
        username_frame.pack(fill="x", pady=STYLE["padding"])
        
        create_modern_label(username_frame, "üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", font=STYLE["font_semibold"], fg=STYLE["accent_color"]).pack(anchor="w")
        self.entry_username = create_modern_entry(username_frame, width=35)
        self.entry_username.pack(fill="x", pady=(STYLE["padding_small"], 0), ipady=STYLE["ipadding"])
        self.entry_username.insert(0, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        self.entry_username.bind("<FocusIn>", lambda e: self.clear_username_placeholder())
        self.entry_username.bind("<FocusOut>", lambda e: self.restore_username_placeholder())

        # –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è
        password_frame = tk.Frame(form_content, bg=STYLE["card_bg_color"])
        password_frame.pack(fill="x", pady=STYLE["padding"])
        
        create_modern_label(password_frame, "üîí –ü–∞—Ä–æ–ª—å", font=STYLE["font_semibold"], fg=STYLE["accent_color"]).pack(anchor="w")
        self.entry_password = create_modern_entry(password_frame, show="*", width=35)
        self.entry_password.pack(fill="x", pady=(STYLE["padding_small"], 0), ipady=STYLE["ipadding"])
        self.entry_password.insert(0, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å...")
        self.entry_password.bind("<FocusIn>", lambda e: self.clear_password_placeholder())
        self.entry_password.bind("<FocusOut>", lambda e: self.restore_password_placeholder())
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = tk.Frame(form_content, bg=STYLE["card_bg_color"])
        buttons_frame.pack(fill="x", pady=(STYLE["padding_large"], 0))
        
        create_modern_button(buttons_frame, "üöÄ –í–æ–π—Ç–∏", self.login, width=25).pack(side="left", padx=(0, STYLE["padding_small"]))
        create_modern_button(buttons_frame, "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", self.register, bg=STYLE["info_color"], width=25).pack(side="right")
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        hint_frame = tk.Frame(main_container, bg=STYLE["bg_color"])
        hint_frame.pack(fill="x", padx=STYLE["padding_large"] * 2, pady=(0, STYLE["padding_large"]))
        
        create_modern_label(hint_frame, "üí° –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ù–∞–∂–º–∏—Ç–µ '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ", 
                          font=STYLE["font_medium"], fg=STYLE["accent_color"]).pack()
    
    def clear_username_placeholder(self):
        if self.entry_username.get() == "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...":
            self.entry_username.delete(0, tk.END)
            self.entry_username.config(fg=STYLE["fg_color"])
    
    def restore_username_placeholder(self):
        if not self.entry_username.get():
            self.entry_username.insert(0, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            self.entry_username.config(fg=STYLE["accent_color"])
    
    def clear_username_placeholder(self):
        if self.entry_username.get() == "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...":
            self.entry_username.delete(0, tk.END)
            self.entry_username.config(fg=STYLE["fg_color"])
    
    def restore_username_placeholder(self):
        if not self.entry_username.get():
            self.entry_username.insert(0, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            self.entry_username.config(fg=STYLE["accent_color"])
    
    def clear_password_placeholder(self):
        if self.entry_password.get() == "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å...":
            self.entry_password.delete(0, tk.END)
            self.entry_password.config(fg=STYLE["fg_color"], show="*")
    
    def restore_password_placeholder(self):
        if not self.entry_password.get():
            self.entry_password.insert(0, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å...")
            self.entry_password.config(fg=STYLE["accent_color"], show="")
    
    def login(self):
        username = self.entry_username.get()
        password = self.entry_password.get()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ placeholder'—ã
        if username == "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..." or password == "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å...":
            messagebox.showwarning("–û—à–∏–±–∫–∞", "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å!")
            return
        
        user = check_user(username, password)
        if user:
            messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", "‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
            self.master.withdraw() # –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
            MainApplication(user[0], user[1], self.master)
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")

    def register(self):
        username = self.entry_username.get()
        password = self.entry_password.get()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ placeholder'—ã
        if username == "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..." or password == "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å...":
            messagebox.showwarning("–û—à–∏–±–∫–∞", "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å!")
            return
        
        if not username or not password:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å!")
            return
        
        if len(password) < 6:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤!")
            return
        
        if add_user(username, password):
            messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", "üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


class App(tk.Tk):
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    def __init__(self):
        super().__init__()
        self.title("keySecret ‚Äî –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π")
        self.configure(bg=STYLE["bg_color"])
        center_window(self, 600, 650)
        self.resizable(False, False)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        try:
            self.iconbitmap("app_icon.ico")
        except:
            pass  # –ò–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ—ë

        login_frame = LoginFrame(self)
        login_frame.pack(expand=True)
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö/—Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        self.setup_logging()
        self.start_server()

    def setup_logging(self):
        try:
            log_dir = os.path.join(os.path.dirname(__file__), "logs")
            os.makedirs(log_dir, exist_ok=True)
            log_path = os.path.join(log_dir, "keysecret.log")

            logger = logging.getLogger()
            logger.setLevel(logging.INFO)

            fmt = logging.Formatter("%(asctime)s %(levelname)s %(name)s: %(message)s")

            fh = RotatingFileHandler(log_path, maxBytes=5 * 1024 * 1024, backupCount=3, encoding="utf-8")
            fh.setFormatter(fmt)
            logger.addHandler(fh)

            ch = logging.StreamHandler()
            ch.setFormatter(fmt)
            logger.addHandler(ch)
        except Exception:
            # –µ—Å–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, –Ω–æ –±–µ–∑ —Ñ–µ–π–ª–∞
            pass

    def start_server(self):
        def run_server():
            server = HTTPServer(("localhost", 8080), SimpleHandler)
            logging.info("HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
            server.serve_forever()

        threading.Thread(target=run_server, daemon=True).start()


if __name__ == "__main__":
    app = App()
    app.mainloop()
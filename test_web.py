#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
"""

import sys
import os

def test_imports():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã"""
    try:
        from web_app import app, add_user, check_user
        print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from web_app import add_user, check_user, DB_NAME
        import sqlite3
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users")
        count = cursor.fetchone()[0]
        conn.close()
        
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        return False

def test_registration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
    try:
        from web_app import add_user
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_username = "test_web_user"
        test_password = "test123"
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        from web_app import DB_NAME
        import sqlite3
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM users WHERE username = ?", (test_username,))
        conn.commit()
        conn.close()
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å
        result = add_user(test_username, test_password)
        
        if result:
            print("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥
            from web_app import check_user
            user = check_user(test_username, test_password)
            if user:
                print("‚úÖ –í—Ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
            else:
                print("‚ùå –í—Ö–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return False
        else:
            print("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_shared_key_visibility():
    """–ö–ª—é—á –Ω–µ –≤—ã–¥–∞—ë—Ç—Å—è –ø—Ä–∏ pending –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ accept"""
    try:
        from init_db import DB_NAME, send_master_key_request, respond_to_request, get_shared_master_keys
        from web_app import add_user, check_user
        import sqlite3

        requester = "req_user"
        owner = "own_user"
        pwd = "test123"

        # –û—á–∏—Å—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∑–∞–ø—Ä–æ—Å—ã
        conn = sqlite3.connect(DB_NAME)
        cur = conn.cursor()
        cur.execute("DELETE FROM master_key_requests WHERE from_user=? OR to_user=?", (requester, requester))
        cur.execute("DELETE FROM master_key_requests WHERE from_user=? OR to_user=?", (owner, owner))
        cur.execute("DELETE FROM users WHERE username IN (?, ?)", (requester, owner))
        conn.commit()
        conn.close()

        # –°–æ–∑–¥–∞–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        assert add_user(requester, pwd)
        assert add_user(owner, pwd)
        assert check_user(requester, pwd)
        assert check_user(owner, pwd)

        # –û—Ç–ø—Ä–∞–≤–∏–º –∑–∞–ø—Ä–æ—Å
        assert send_master_key_request(requester, owner)

        # –ü—Ä–æ–≤–µ—Ä–∏–º: –∫–ª—é—á —Å–∫—Ä—ã—Ç (None)
        shared = get_shared_master_keys(requester)
        assert shared and shared[0][2] == 'pending'
        assert shared[0][1] is None

        # –ù–∞–π–¥—ë–º id –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø—Ä–∏–º–µ–º –µ–≥–æ
        conn = sqlite3.connect(DB_NAME)
        cur = conn.cursor()
        cur.execute("SELECT id FROM master_key_requests WHERE from_user=? AND to_user=? ORDER BY id DESC LIMIT 1", (requester, owner))
        req_id = cur.fetchone()[0]
        conn.close()
        respond_to_request(req_id, True)

        # –¢–µ–ø–µ—Ä—å –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–∏–º
        shared2 = get_shared_master_keys(requester)
        assert shared2 and shared2[0][2] == 'accepted'
        assert shared2[0][1] is not None

        print("‚úÖ –í–∏–¥–∏–º–æ—Å—Ç—å –æ–±—â–µ–≥–æ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–ª—é—á–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è keySecret")
    print("=" * 50)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database),
        ("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", test_registration),
        ("–í–∏–¥–∏–º–æ—Å—Ç—å –æ–±—â–µ–≥–æ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–∞", test_shared_key_visibility)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüîç –¢–µ—Å—Ç: {test_name}")
        if test_func():
            passed += 1
        else:
            print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –Ω–µ –ø—Ä–æ—à–µ–ª")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏! –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ.")
        print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("python web_app.py")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")

if __name__ == "__main__":
    main()

// –û—Å–Ω–æ–≤–Ω—ã–µ JavaScript —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—É—Ñ–µ—Ä–æ–º –æ–±–º–µ–Ω–∞
function copyToClipboard(text) {
    if (navigator.clipboard && window.isSecureContext) {
        return navigator.clipboard.writeText(text);
    } else {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        textArea.style.top = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        return new Promise((resolve, reject) => {
            document.execCommand('copy') ? resolve() : reject();
            textArea.remove();
        });
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notification = document.createElement('div');
    notification.className = `alert alert-${type}`;
    notification.innerHTML = `
        <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
        ${message}
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
    let messagesContainer = document.querySelector('.messages');
    if (!messagesContainer) {
        messagesContainer = document.createElement('div');
        messagesContainer.className = 'messages';
        document.querySelector('.container').insertBefore(messagesContainer, document.querySelector('.main-content'));
    }
    
    messagesContainer.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
        }
    }, 5000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º —Å AJAX
function handleFormSubmit(form, successCallback, errorCallback) {
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(form);
        const url = form.action || window.location.href;
        
        fetch(url, {
            method: 'POST',
            body: formData
        })
        .then(response => {
            if (response.ok) {
                return response.text();
            }
            throw new Error('Network response was not ok');
        })
        .then(data => {
            if (successCallback) successCallback(data);
        })
        .catch(error => {
            if (errorCallback) errorCallback(error);
        });
    });
}

// –ê–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
function showLoading(element, text = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    element.innerHTML = `
        <div class="loading">
            <i class="fas fa-spinner fa-spin"></i>
            <span>${text}</span>
        </div>
    `;
}

function hideLoading(element) {
    const loading = element.querySelector('.loading');
    if (loading) {
        loading.remove();
    }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º
function validateForm(form) {
    const requiredFields = form.querySelectorAll('[required]');
    let isValid = true;
    
    requiredFields.forEach(field => {
        if (!field.value.trim()) {
            field.style.borderColor = 'var(--error-color)';
            isValid = false;
        } else {
            field.style.borderColor = '';
        }
    });
    
    return isValid;
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∏–ª–µ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
function clearValidationStyles(form) {
    const fields = form.querySelectorAll('input, textarea, select');
    fields.forEach(field => {
        field.style.borderColor = '';
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
function handleApiError(error) {
    console.error('API Error:', error);
    showNotification('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞', 'error');
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–æ–ª—è–º–∏
function togglePasswordVisibility(button) {
    const passwordField = button.closest('.password-field');
    const passwordText = passwordField.querySelector('.password-text');
    const icon = button.querySelector('i');
    const password = passwordField.dataset.password;
    
    if (passwordText.textContent === '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢') {
        passwordText.textContent = password;
        icon.className = 'fas fa-eye-slash';
    } else {
        passwordText.textContent = '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢';
        icon.className = 'fas fa-eye';
    }
}

function copyPassword(password) {
    copyToClipboard(password)
        .then(() => {
            showNotification('üìã –ü–∞—Ä–æ–ª—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
        })
        .catch(() => {
            showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä–æ–ª—è', 'error');
        });
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª—é—á–∞–º–∏
function copyMasterKey(key) {
    copyToClipboard(key)
        .then(() => {
            showNotification('üìã –ú–∞—Å—Ç–µ—Ä-–∫–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
        })
        .catch(() => {
            showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª—é—á–∞', 'error');
        });
}

function copySharedKey(key) {
    copyToClipboard(key)
        .then(() => {
            showNotification('üìã –ö–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
        })
        .catch(() => {
            showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª—é—á–∞', 'error');
        });
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
document.addEventListener('DOMContentLoaded', function() {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    const alerts = document.querySelectorAll('.alert');
    alerts.forEach(alert => {
        setTimeout(() => {
            if (alert.parentNode) {
                alert.style.opacity = '0';
                setTimeout(() => {
                    if (alert.parentNode) {
                        alert.parentNode.removeChild(alert);
                    }
                }, 300);
            }
        }, 5000);
    });
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∏–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
        const inputs = form.querySelectorAll('input, textarea, select');
        inputs.forEach(input => {
            input.addEventListener('input', function() {
                this.style.borderColor = '';
            });
        });
    });
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.copyToClipboard = copyToClipboard;
window.showNotification = showNotification;
window.handleFormSubmit = handleFormSubmit;
window.showLoading = showLoading;
window.hideLoading = hideLoading;
window.validateForm = validateForm;
window.clearValidationStyles = clearValidationStyles;
window.handleApiError = handleApiError;
window.togglePasswordVisibility = togglePasswordVisibility;
window.copyPassword = copyPassword;
window.copyMasterKey = copyMasterKey;
window.copySharedKey = copySharedKey;
